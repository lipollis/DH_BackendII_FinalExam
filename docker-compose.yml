version: '3.4'

services:
  mongodb:
    image: mongo:4.4.2
    ports:
      - "27017:27017"
  zipkin-server:
    image: openzipkin/zipkin:2
    container_name: zipkin-server
    ports:
      - "9411:9411"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

  eureka-server:
    build: eureka-server
    container_name: eureka-server
    restart: on-failure
    depends_on:
      - zipkin-server
      - mongodb
    ports:
      - "8761:8761"

  config-server:
    build: config-server
    container_name: config-server
    restart: on-failure
    depends_on:
      - eureka-server
    ports:
      - "8888:8888"

  movie-service:
    build: movie-service
    container_name: movie-service
    depends_on:
      - config-server
    ports:
      - 8001:8001

  catalog-service:
    build: catalog-service
    container_name: catalog-service
    depends_on:
      - config-server
      - movie-service
    ports:
      - 8002:8002

  api-gateway:
    build: api-gateway
    container_name: api-gateway
    restart: on-failure
    depends_on:
      - config-server
      - movie-service
      - series-service
      - catalog-service
    ports:
      - 8080:8080

  #  api-gateway:
  #    build: api-gateway
  #    container_name: api-gateway
  #    restart: on-failure
  #    depends_on:
  #      - config-server
  #      - movie-service
  #      - series-service
  #      - catalog-service
  #    ports:
  #      - "8080:8080"
  ##      "<host>:<container>" a porta do container nao pode ser acessada
  #  movie-service:
  #    build: movie-service
  #    restart: on-failure
  #    ports:
  #      - "8084:8084"
  #    depends_on:
  #      - db_avaliacao2_movie
  #  serie-service:
  #    build: series-service
  #    restart: on-failure
  #    ports:
  #      - "8085:8085"
  #    depends_on:
  #      - db-avaliacao2-series
  #  catalog-service:
  #    build: catalog-service
  #    restart: on-failure
  #    ports:
  #      - "8086:8086"
  #    depends_on:
  #      - movie-service
  #      - series-service
  #      - db-avaliacao2-catalog
#  db-avaliacao2-movie:
#    image: mysql:8.0
#    container_name: "db_avaliacao2_movie"
#    environment:
#      MYSQL_ROOT_PASSWORD: 7890123
#      MYSQL_DATABASE: avaliacao2-serie
#      MYSQL_USER: jardel
#      MYSQL_PASSWORD: 7890123
#    volumes:
#      - ./mysql-movie-volume:/var/lib/mysql # possibilidade de usar mariaDB - MySql pode dar problemas com volumes docker
#    ports:
#      - "3307:3306"
#  db-avaliacao2-serie:
#    image: mongo:4.4.2
#    container_name: "db-avaliacao2-serie"
#    environment:
#      MONGO_INITDB_DATABASE: avaliacao2_serie
#      MONGO_INITDB_ROOT_USERNAME: test
#      MONGO_INITDB_ROOT_PASSWORD: 7890123
#    volumes:
#      #      - ./init-mongo-serie.js:/docker-entrypoint-initdb.d/init-mongo-js:ro
#      - ./mongo-serie-volume:/data/db
#    ports:
#      - "27017:27017"
#    command: mongod
#    healthcheck:
#      test: "mongo --eval 'db.stats().ok'"
#      interval: 5s
#      timeout: 2s
#      retries: 60
#  db-avaliacao2-catalog:
#    image: mongo:4.4.2
#    container_name: "db-avaliacao2-catalog"
#    environment:
#      MONGO_INITDB_DATABASE: avaliacao2_catalog
#      MONGO_INITDB_ROOT_USERNAME: test
#      MONGO_INITDB_ROOT_PASSWORD: 7890123
#    volumes:
#      - ./init-mongo-catalog.js:/docker-entrypoint-initdb.d/init-mongo-js:ro
#      - ./mongo-catalog-volume:/data/db
#    ports:
#      - "27018:27017"
#    command: mongod
#    healthcheck:
#      test: "mongo --eval 'db.stats().ok'"
#      interval: 5s
#      timeout: 2s
#      retries: 60
#volumes:
#  step: